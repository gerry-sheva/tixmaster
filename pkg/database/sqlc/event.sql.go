// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: event.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const newEvent = `-- name: NewEvent :one
with inserted_event as (
    insert into event (name, summary, description, available_ticket, thumbnail, banner, starting_date, ending_date, venue_id, host_id)
    values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
    returning event_id, name, summary, thumbnail, starting_date, ending_date, venue_id, host_id
)
select
    ie.event_id as id,
    ie.name,
    ie.summary,
    ie.starting_date,
    ie.ending_date,
    ie.thumbnail,
    v.name as venue_name,
    v.city,
    v.state,
    h.name as host_name,
    h.avatar as host_avatar,
    h.bio as host_bio
from
    inserted_event ie
join
    venue v on ie.venue_id = v.venue_id
join
    host h on ie.host_id = h.host_id
`

type NewEventParams struct {
	Name            string
	Summary         string
	Description     string
	AvailableTicket int32
	Thumbnail       string
	Banner          string
	StartingDate    pgtype.Timestamptz
	EndingDate      pgtype.Timestamptz
	VenueID         pgtype.UUID
	HostID          pgtype.UUID
}

type NewEventRow struct {
	ID           pgtype.UUID
	Name         string
	Summary      string
	StartingDate pgtype.Timestamptz
	EndingDate   pgtype.Timestamptz
	Thumbnail    string
	VenueName    string
	City         string
	State        string
	HostName     string
	HostAvatar   string
	HostBio      string
}

func (q *Queries) NewEvent(ctx context.Context, arg NewEventParams) (NewEventRow, error) {
	row := q.db.QueryRow(ctx, newEvent,
		arg.Name,
		arg.Summary,
		arg.Description,
		arg.AvailableTicket,
		arg.Thumbnail,
		arg.Banner,
		arg.StartingDate,
		arg.EndingDate,
		arg.VenueID,
		arg.HostID,
	)
	var i NewEventRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Summary,
		&i.StartingDate,
		&i.EndingDate,
		&i.Thumbnail,
		&i.VenueName,
		&i.City,
		&i.State,
		&i.HostName,
		&i.HostAvatar,
		&i.HostBio,
	)
	return i, err
}
